{% include 'header.html.twig' %}
        <h1>Privjet</h1>
{% include 'footer.html.twig' %}
controller: App\Controller\DefaultController::index

index:
path: /
controller: App\Controller\BaseController::index

dice-game:
path: /dice-game
controller: App\Controller\BaseController::DiceGames

dice-try:
path: /dice-try
controller: App\Controller\BaseController::DiceTry

21_1:
path: /21_1
controller: App\Controller\BaseController::DiceOneGame

21_2:
path: /21_2
controller: App\Controller\BaseController::DiceTwoGame

roll:
path: /roll
controller: App\Controller\BaseController::RollDice

reset:
path: /reset
controller: App\Controller\BaseController::Reset

stop:
path: /stop
controller: App\Controller\BaseController::stop

resetscore:
path: /resetscore
controller: App\Controller\BaseController::ResetScore

rollTwo:
path: /rollTwo
controller: App\Controller\BaseController::RollTwoDice

resetTwo:
path: /resetTwo
controller: App\Controller\BaseController::ResetTwo

stopTwo:
path: /stopTwo
controller: App\Controller\BaseController::stopTwo

resetscoreTwo:
path: /resetscoreTwo
controller: App\Controller\BaseController::ResetScoreTwo

<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\Session;
use Magv20\GameTwentyOne;
use Magv20\DiceHand;




class BaseController extends AbstractController
{
  /**
   * @Route("/")
  */
  public function index(): Response
  {
    return $this->render('dice.html.twig', [
        'message' => "Hello World in view",
    ]);
  }

    public function DiceGames(): Response
    {
        return $this->render('dice.html.twig', [
            'message' => "Hello World in view",
        ]);
    }

    public function DiceTry(): Response
    {
        return $this->render('try.html.twig', [
            'message' => "Hello World in view",
        ]);
    }

    public function DiceOneGame(): Response
    {
        $_SESSION['historik'] = array();
        $_SESSION['total'] = array();
        $_SESSION['runda'] = 0;
        $_SESSION['total'][] = array();
        return $this->render('21_1.html.twig', [
            'message' => null,
            'totale' => null,
            'realmessage' => null,
            'historik' => [],
        ]);
    }

    public function RollDice(): Response
    {
        $object = new GameTwentyOne(6);
        return $this->render('21_1.html.twig', [
        'message' => $object->roll(),
        'totale' => $object->getTotal() ?? $object->roll(),
        'realmessage' => $object->Message(),
        'historik' => $object->getHistorik(),
        ]);
    }
    public function Reset(): Response
    {
      $object = new GameTwentyOne(6);
      $object->reset();
      return $this->render('21_1.html.twig', [
          'message' => null,
          'totale' => null,
          'realmessage' => null,
          'historik' => $object->getHistorik(),
      ]);
    }
    public function Stop(): Response
    {
      $object = new GameTwentyOne(6);
      $object->computer();
      return $this->render('21_1.html.twig', [
        'message' => null,
        'totale' => null,
        'realmessage' => $object->Message(),
        'historik' => $object->getHistorik(),
      ]);
    }
    public function ResetScore(): Response
    {
      $object = new GameTwentyOne(6);
      $object->ResetScore();
      return $this->render('21_1.html.twig', [
        'message' => null,
        'totale' => $object->getTotal() ?? $object->roll(),
        'realmessage' => $object->Message(),
        'historik' => $object->getHistorik(),
      ]);
    }

    public function DiceTwoGame(): Response
    {
        $_SESSION['historik'] = array();
        $_SESSION['total'] = array();
        $_SESSION['runda'] = 0;
        $_SESSION['totalen'] = 0;
        return $this->render('21_2.html.twig', [
            'message' => null,
            'message2' => null,
            'totale' => null,
            'realmessage' => null,
            'historik' => [],
        ]);
    }

    public function RollTwoDice(): Response
    {
        $object = new DiceHand(2);
        $object->roll();
        $varde = $object->values();

        return $this->render('21_2.html.twig', [
        'message' => $varde[0],
        'message2' => $varde[1],
        'totale' => $object->sum(),
        'realmessage' => $object->Message(),
        'historik' => $object->getHistorik(),
        ]);
    }

    public function ResetTwo(): Response
    {
      $object = new DiceHand(2);
      $object->reset();
      return $this->render('21_2.html.twig', [
          'message' => null,
          'message2' => null,
          'totale' => null,
          'realmessage' => null,
          'historik' => $object->getHistorik(),
      ]);
    }
    public function StopTwo(): Response
    {
      $object = new DiceHand(2);
      $object->computer();
      return $this->render('21_2.html.twig', [
        'message' => null,
        'message2' => null,
        'totale' => null,
        'realmessage' => $object->Message(),
        'historik' => $object->getHistorik(),
      ]);
    }
    public function ResetScoreTwo(): Response
    {
      $object = new DiceHand(2);
      $object->ResetScore();
      return $this->render('21_2.html.twig', [
        'message' => null,
        'message2' => null,
        'totale' => $object->sum(),
        'realmessage' => $object->Message(),
        'historik' => $object->getHistorik(),
      ]);
    }

    <?php

    declare(strict_types=1);

    namespace Magv20;

    class GameTwentyOne
    {
        private $save;
        public $lastroll;
        public $lastrollcomputer;
        private $sides;
        private $total;
        private $message;
        private $historik;


        public function __construct(int $sides)
        {
            $this->sides = $sides;
        }

        public function roll()
        {

            $this->lastroll = random_int(1, $this->sides);
            $_SESSION['total'][] = $this->lastroll;
            if (array_sum($_SESSION['total']) == 21) {
                $this->message = 'Congratulations you won!';
                $_SESSION['history'] = "Du";
                $_SESSION['runda']++;
                $historik = array(
                  'vinnare' => $_SESSION['history'],
                  'runda' => $_SESSION['runda']
                );
                $_SESSION['historik'][] = $historik;

                $this->reset();
              }
            elseif (array_sum($_SESSION['total']) > 21) {
                $this->message = 'You lost play again!';
                $_SESSION['history'] = "Computer";
                $_SESSION['runda']++;
                $historik = array(
                  'vinnare' => $_SESSION['history'],
                  'runda' => $_SESSION['runda']
                );
                $_SESSION['historik'][] = $historik;
                $this->reset();
              }
            return $this->lastroll;
        }
        public function getLastRoll()
        {
            return $this->lastroll;
        }
        public function getTotal()
        {
            return array_sum($_SESSION['total']);
        }
        public function Reset()
        {
          $_SESSION['total'] = array();
          $_SESSION['total'][] = array();
        }
        public function ResetScore()
        {
          $_SESSION['historik'] = array();
          $_SESSION['runda'] = 0;
        }
        public function Message()
        {
            return $this->message;
        }

        public function Computer()
        {
          $_SESSION['computer_value'] = 0;
          while ($_SESSION['computer_value'] < 21 or $_SESSION['computer_value'] == array_sum($_SESSION['total'])) {
              $this->lastrollcomputer = random_int(1, $this->sides);
              $_SESSION['computer_value'] = $_SESSION['computer_value'] + $this->lastrollcomputer;
              if ($_SESSION['computer_value'] == 21 or $_SESSION['computer_value'] == array_sum($_SESSION['total'])) {
                  $_SESSION['total'] = array();
                  $_SESSION['history'] = "Computer";
                  $_SESSION['runda']++;
                  $historik = array(
                    'vinnare' => $_SESSION['history'],
                    'runda' => $_SESSION['runda']
                  );
                  $_SESSION['historik'][] = $historik;
                  $this->historik = $historik;
                  $this->message = 'You lost play again!';
                  return $_SESSION['historik'];
                  break;
              } else if ($_SESSION['computer_value'] > 22 and $_SESSION['computer_value'] != 21) {
                    $_SESSION['total'] = array();
                    $_SESSION['history'] = "Du";
                    $_SESSION['runda']++;
                    $historik = array(
                      'vinnare' => $_SESSION['history'],
                      'runda' => $_SESSION['runda']
                    );
                    $_SESSION['historik'][] = $historik;
                    $this->historik = $historik;
                    $this->message = 'Congratulations you won!';
                    return $_SESSION['historik'];
                    break;
              }
          }
        }
        function stop()
        {
            return $this->computer();
        }
        function getHistorik()
        {
            return $_SESSION['historik'];
        }

    }


}

<?php

declare(strict_types=1);

namespace Magv20;

class DiceHand
{
    private $dices;
    private $values;
    private $sides = 6;
    private $save;
    private $total;
    private $message;


    public function __construct(int $dices)
    {
        $this->dices  = [];
        $this->values = [];

        for ($i = 0; $i < $dices; $i++) {
            $this->dices[]  = new Dice($this->sides);
            $this->values[] = null;
        }

    }

    public function roll()

    {

        for ($i = 0; $i < count($this ->dices); $i++) {
            $save = random_int(1, $this->sides);

            $this->values[$i] = $save;
        }
        $_SESSION['total'][] = $this->values;
        if ($this->sum() == 21) {
            $this->message = 'Congratulations you won!';
            $_SESSION['history'] = "Du";
            $_SESSION['runda']++;
            $historik = array(
              'vinnare' => $_SESSION['history'],
              'runda' => $_SESSION['runda']
            );
            $_SESSION['historik'][] = $historik;
            $this->reset();
          }
        elseif ($this->sum() > 21) {
            $this->message = 'You lost play again!';
            $_SESSION['history'] = "Computer";
            $_SESSION['runda']++;
            $historik = array(
              'vinnare' => $_SESSION['history'],
              'runda' => $_SESSION['runda']
            );
            $_SESSION['historik'][] = $historik;
            $this->reset();
          }
      }
    public function Message()
    {
        return $this->message;
    }
    public function Reset()
    {
      $_SESSION['total'] = array();
      $_SESSION['totalen'] = array();
      $_SESSION['total'][] = array();
    }
    public function values()
    {
        return $this->values;
    }
    public function ResetScore()
    {
      $_SESSION['historik'] = array();
      $_SESSION['runda'] = 0;
    }
    public function sum()
    {
      $_SESSION['totalen'] = 0;
      for ($i = 0; $i < sizeof($_SESSION['total']); $i++) {
          $_SESSION['totalen'] = $_SESSION['totalen'] + array_sum($_SESSION['total'][$i]);
      }

        return $_SESSION['totalen'];
    }
    function stop()
    {
        return $this->computer();
    }
    function getHistorik()
    {
        return $_SESSION['historik'];
    }
    public function Computer()
    {
      $_SESSION['computer_value'] = 0;
      while ($_SESSION['computer_value'] < 21 or $_SESSION['computer_value'] == $this->sum()) {
          $this->lastrollcomputer = random_int(1, $this->sides);
          $_SESSION['computer_value'] = $_SESSION['computer_value'] + $this->lastrollcomputer;
          if ($_SESSION['computer_value'] == 21 or $_SESSION['computer_value'] == $this->sum()) {
              $_SESSION['total'] = array();
              $_SESSION['history'] = "Computer";
              $_SESSION['runda']++;
              $historik = array(
                'vinnare' => $_SESSION['history'],
                'runda' => $_SESSION['runda']
              );
              $_SESSION['historik'][] = $historik;
              $this->historik = $historik;
              $this->message = 'You lost play again!';
              return $_SESSION['historik'];
              break;
          } else if ($_SESSION['computer_value'] > 22 and $_SESSION['computer_value'] != 21) {
                $_SESSION['total'] = array();
                $_SESSION['history'] = "Du";
                $_SESSION['runda']++;
                $historik = array(
                  'vinnare' => $_SESSION['history'],
                  'runda' => $_SESSION['runda']
                );
                $_SESSION['historik'][] = $historik;
                $this->historik = $historik;
                $this->message = 'Congratulations you won!';
                return $_SESSION['historik'];
                break;
          }
      }
    }
}
